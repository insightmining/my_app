apiVersion: apps/v1
kind: Deployment
metadata:
  name: sk033-my-app
  namespace: skala-practice
spec:
  replicas: 2
  selector:
    matchLabels:
      app: sk033-my-app
  template:
    metadata:
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '8081'
        prometheus.io/path: '/actuator/prometheus'
        update: 2a864618c29f32fe085b55269a7b136f
      labels:
        app: sk033-my-app
    spec:
      serviceAccountName: default
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - sk033-my-app
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: my-app
        image: amdp-registry.skala-ai.com/skala25a/sk033-my-app:2.0.0-2-ce88f81b6a88
        imagePullPolicy: Always
        env:
        - name: LOGGING_LEVEL
          value: DEBUG
        - name: USER_NAME
          value: sk033
        - name: NAMESPACE
          value: skala-practice
        - name: SPRING_PROFILES_ACTIVE
          value: prod
        - name: SPRING_DATASOURCE_URL
          valueFrom:
            configMapKeyRef:
              name: my-app-config
              key: SPRING_DATASOURCE_URL
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            configMapKeyRef:
              name: my-app-config
              key: SPRING_DATASOURCE_USERNAME
        envFrom:
        - secretRef:
            name: my-app-secrets
        ports:
        - containerPort: 8080
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 3
          failureThreshold: 2
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 3
          failureThreshold: 2
        startupProbe:
          httpGet:
            path: /startup
            port: 8080
          failureThreshold: 30
          periodSeconds: 10
        resources:
          requests:
            cpu: "100m"
          limits:
            cpu: "500m"
